package ie.gmit.sw;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class PositionalStabilityCalculator {

	private int afferentCoupling;
	private int efferentCoupling;
	private HashMap<Class, PositionalStabilityMeasurement> hashMap = new HashMap<Class, PositionalStabilityMeasurement>();
	
	public void caculateAfferent() {
		
	}

	public void getPositionalStability(Class cls) {
		// fields
		// methods
		// method parameters
		// constructors
		// constructors parameters
		// interfaces
		// interfaces parameters

		Field[] fields = cls.getDeclaredFields();
		Method[] methods = cls.getMethods();
		Class[] methodParameters;
		Constructor[] constructors = cls.getConstructors();
		Class[] constructorParameters;
		Class[] interfaces = cls.getInterfaces();
		List<String> classList = new ArrayList<String>();
		
		
		Field[] fields = cls.getDeclaredFields(); // Get the set of Fields
		for(Field field : fields){
			Type type = field.getType();
			if(map.containsKey(type.getTypeName())){
				if(!classList.contains(type.getTypeName())){
					classList.add(type.getTypeName());
					outdegree++;
					PositionalStabilityMeasurement stability = map.get(type.getTypeName());
					stability.setInDegree(stability.getInDegree() + 1);
				}
			}
		}
		

//		for (Method m : methods) {
//			// System.out.println("\nClass: " + cls + "\nMethod: " + m);
//			methodParameters = m.getParameterTypes();
//			for (Class mp : methodParameters) {
//				// System.out.println("Method Parameters: " + mp);
//			}
//		}
//
//		for (Constructor c : constructors) {
//			//System.out.println("\nClass: " + cls + "\nConstructor: " + c);
//			methodParameters = c.getParameterTypes();
//			for (Class mp : methodParameters) {
//				//System.out.println("Method Parameters: " + mp);
//			}
//		}
//
//		for (Class i : interfaces) {
//			// System.out.println("\nClass: " + cls + "\nInterface: " + i);
//		}

	}

}
